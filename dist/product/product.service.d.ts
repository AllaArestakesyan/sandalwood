import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { Product } from './entities/product.entity';
import { Repository } from 'typeorm';
import { Category } from 'src/category/entities/category.entity';
import { ProductImagesService } from 'src/product-images/product-images.service';
import { ProductColorService } from 'src/product_color/product_color.service';
import { ProductSizeService } from 'src/product_size/product_size.service';
import { ProductImage } from 'src/product-images/entities/product-image.entity';
export declare class ProductService {
    private productRepository;
    private categoryRepository;
    private productImageService;
    private productColorService;
    private productSizeService;
    constructor(productRepository: Repository<Product>, categoryRepository: Repository<Category>, productImageService: ProductImagesService, productColorService: ProductColorService, productSizeService: ProductSizeService);
    create(createProductDto: CreateProductDto, images: any): Promise<string>;
    findAll(): Promise<{
        images: string;
        id: number;
        name: string;
        quantityResultsPurchases: number;
        priceForSimplePurchase: number;
        priceForWholesalePurchase: number;
        description: string;
        brand: string;
        style: number;
        weather: string;
        material: string;
        category: Category;
        sizes: import("../product_size/entities/product_size.entity").ProductSize[];
        colors: import("../product_color/entities/product_color.entity").ProductColor[];
        wishlist: import("../wishlist/entities/wishlist.entity").Wishlist[];
        cart: import("../cart/entities/cart.entity").Cart[];
        order: import("../order/entities/order.entity").Order[];
    }[]>;
    filterBy({ page, categoryName, color, min_price, max_price, size, limit }: {
        page: number;
        categoryName: string;
        color: string;
        min_price: number;
        max_price: number;
        size: number;
        limit: number;
    }): Promise<{
        error: boolean;
        count: number;
        page: number;
        rows: {
            images: string;
            id: number;
            name: string;
            quantityResultsPurchases: number;
            priceForSimplePurchase: number;
            priceForWholesalePurchase: number;
            description: string;
            brand: string;
            style: number;
            weather: string;
            material: string;
            category: Category;
            sizes: import("../product_size/entities/product_size.entity").ProductSize[];
            colors: import("../product_color/entities/product_color.entity").ProductColor[];
            wishlist: import("../wishlist/entities/wishlist.entity").Wishlist[];
            cart: import("../cart/entities/cart.entity").Cart[];
            order: import("../order/entities/order.entity").Order[];
        }[];
    }>;
    findOne(id: number): Promise<{
        products: {
            images: string;
            id: number;
            name: string;
            quantityResultsPurchases: number;
            priceForSimplePurchase: number;
            priceForWholesalePurchase: number;
            description: string;
            brand: string;
            style: number;
            weather: string;
            material: string;
            category: Category;
            sizes: import("../product_size/entities/product_size.entity").ProductSize[];
            colors: import("../product_color/entities/product_color.entity").ProductColor[];
            wishlist: import("../wishlist/entities/wishlist.entity").Wishlist[];
            cart: import("../cart/entities/cart.entity").Cart[];
            order: import("../order/entities/order.entity").Order[];
        }[];
        id: number;
        name: string;
        quantityResultsPurchases: number;
        priceForSimplePurchase: number;
        priceForWholesalePurchase: number;
        description: string;
        brand: string;
        style: number;
        weather: string;
        material: string;
        category: Category;
        sizes: import("../product_size/entities/product_size.entity").ProductSize[];
        colors: import("../product_color/entities/product_color.entity").ProductColor[];
        images: ProductImage[];
        wishlist: import("../wishlist/entities/wishlist.entity").Wishlist[];
        cart: import("../cart/entities/cart.entity").Cart[];
        order: import("../order/entities/order.entity").Order[];
    }>;
    update(id: number, updateProductDto: UpdateProductDto): Promise<string>;
    remove(id: number): Promise<string>;
}
